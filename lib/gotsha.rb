# frozen_string_literal: true

require "fileutils"
require "yaml"

require_relative "gotsha/version"

module Gotsha
  class NoCommandConfigured < StandardError; end
  class AutogeneratedConfigDetected < StandardError; end

  CONFIG_DIR = ".gotsha"
  CONFIG_FILE = File.join(CONFIG_DIR, "config.yml")
  CONFIG_TEMPLATE_PATH = File.expand_path("gotsha/templates/config.yml", __dir__)
  GH_CONFIG_FILE = File.join(CONFIG_DIR, "github_action_example.yml")
  GH_CONFIG_TEMPLATE_PATH = File.expand_path("gotsha/templates/github_action_example.yml", __dir__)
  HOOKS_TEMPLATES_DIR = File.expand_path("gotsha/templates", __dir__)

  # Main entry
  class CLI
    def self.call(action = :run)
      action ||= :run

      new.public_send(action)
    end

    def init
      puts "Creating files..."

      unless File.exist?(CONFIG_FILE)
        FileUtils.mkdir_p(CONFIG_DIR)

        File.write(CONFIG_FILE, File.read(CONFIG_TEMPLATE_PATH))
      end

      File.write(GH_CONFIG_FILE, File.read(GH_CONFIG_TEMPLATE_PATH))

      git_hooks_dest = ".gotsha/hooks"

      FileUtils.mkdir_p(git_hooks_dest)

      %w[post-commit pre-push].each do |hook|
        src = File.join(HOOKS_TEMPLATES_DIR, "git_hooks", hook)
        dst = File.join(git_hooks_dest, hook)

        next if File.exist?(dst)

        FileUtils.cp(src, dst)
        FileUtils.chmod("+x", dst)
      end

      Kernel.system("git config --local core.hooksPath .gotsha/hooks")

      puts "✓ Done"
    end

    def run
      config = YAML.load_file(CONFIG_FILE)

      if config.key?("autogenerated")
        raise AutogeneratedConfigDetected,
              "Autogenerated config detected! Please, remove `autogenerated: true` from .gotsha/config.yml"
      end

      commands = config.fetch("commands").join(" && ")

      raise NoCommandConfigured if commands.to_s.empty?

      if Kernel.system(commands)
        Kernel.system("git notes --ref=gotsha add -f -m 'ok'")

        puts "\n✓ Gotsha: tests passed\n\n"
      else
        puts "\n✗ Gotsha: tests failed\n\n"
      end
    end

    def verify
      if last_comment_note == "ok"
        puts "\n✓ Gotsha: tests passed\n\n"
        exit 0
      else
        puts "\n✗ Gotsha: not verified yet\n\n"
        exit 1
      end
    end

    private

    def last_comment_note
      `git notes --ref=gotsha show #{last_commit_sha} 2>/dev/null`.strip
    end

    def last_commit_sha
      @last_commit_sha ||= `git rev-parse HEAD`.strip
    end
  end
end
