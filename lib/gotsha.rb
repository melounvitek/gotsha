# frozen_string_literal: true

require "fileutils"
require "yaml"
require "gotsha/config"
require "gotsha/errors"
require "gotsha/version"

module Gotsha
  include Config
  include Errors

  # Main entry
  class ActionDispatcher
    def self.call(action_name = :run)
      action_name ||= :run

      new.public_send(action_name)
    end

    def init
      puts "Creating files..."

      unless File.exist?(Config::CONFIG_FILE)
        FileUtils.mkdir_p(Config::CONFIG_DIR)

        File.write(Config::CONFIG_FILE, File.read(Config::CONFIG_TEMPLATE_PATH))
      end

      File.write(Config::GH_CONFIG_FILE, File.read(Config::GH_CONFIG_TEMPLATE_PATH))

      FileUtils.mkdir_p(Config::HOOKS_DIR)

      %w[post-commit pre-push].each do |hook|
        src = File.join(Config::HOOKS_TEMPLATES_DIR, "git_hooks", hook)
        dst = File.join(Config::HOOKS_DIR, hook)

        next if File.exist?(dst)

        FileUtils.cp(src, dst)
        FileUtils.chmod("+x", dst)
      end

      Kernel.system("git config --local core.hooksPath .gotsha/hooks")

      puts "✓ Done"
    end

    def run
      config = YAML.load_file(Config::CONFIG_FILE)

      if config.key?("autogenerated")
        raise Errors::AutogeneratedConfigDetected,
              "Autogenerated config detected! Please, remove `autogenerated: true` from .gotsha/config.yml"
      end

      commands = config.fetch("commands").join(" && ")

      raise Errors::NoCommandConfigured if commands.to_s.empty?

      if Kernel.system(commands)
        Kernel.system("git notes --ref=gotsha add -f -m 'ok'")

        puts "\n✓ Gotsha: tests passed\n\n"
      else
        puts "\n✗ Gotsha: tests failed\n\n"
      end
    end

    def verify
      if last_comment_note == "ok"
        puts "\n✓ Gotsha: tests passed\n\n"
        exit 0
      else
        puts "\n✗ Gotsha: not verified yet\n\n"
        exit 1
      end
    end

    private

    def last_comment_note
      `git notes --ref=gotsha show #{last_commit_sha} 2>/dev/null`.strip
    end

    def last_commit_sha
      @last_commit_sha ||= `git rev-parse HEAD`.strip
    end
  end
end
