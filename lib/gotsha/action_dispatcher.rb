# frozen_string_literal: true

module Gotsha
  class ActionDispatcher
    INIT_SETUP_ACTION = "init"
    DEFAULT_ACTION = "help"

    def self.call(action_name = DEFAULT_ACTION)
      action_name ||= DEFAULT_ACTION

      new.call(action_name)
    end

    def call(action_name)
      @action_name = action_name

      verify_configuration!

      action_class.new.call
    end

    private

    attr_reader :action_name

    def verify_configuration!
      return if action_name.to_s == INIT_SETUP_ACTION

      raise(Errors::HardFail, "config files not found, please run `gotsha init` first") if UserConfig.blank?

      hooks_dir = BashCommand.run!("git config core.hooksPath").text_output

      unless hooks_dir == Config::HOOKS_DIR
        raise(Errors::HardFail, "Git hooks not configured, please run `gotsha init`")
      end

      return unless UserConfig.get(:autogenerated)

      raise Errors::HardFail,
            "autogenerated config detected! Please, remove `autogenerated = true` from `.gotsha/config.toml` " \
            "(you can run `gotsha configure` to open it)"
    end

    def action_class
      Kernel.const_get("Gotsha::Actions::#{action_name.capitalize}")
    rescue NameError
      raise Errors::HardFail, "unknown command `#{action_name}`. #{Actions::Help.new.call}"
    end
  end
end
