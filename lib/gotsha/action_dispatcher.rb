# frozen_string_literal: true

module Gotsha
  class ActionDispatcher
    SKIP_CONFIG_VERIFICATION_FOR = %w[init configure uninstall].freeze
    DEFAULT_ACTION = "help"
    HELP_ACTION_SHORTCUT = "-h"

    def self.call(action_name = DEFAULT_ACTION, *args)
      action_name ||= DEFAULT_ACTION

      new.call(action_name, *args)
    end

    def call(action_name, *args)
      @action_name = action_name

      verify_configuration!

      action_class.new.call(*args)
    rescue ArgumentError
      return Actions::Help.new.call(action_name) if args == [HELP_ACTION_SHORTCUT]

      raise Errors::HardFail, "too many arguments"
    end

    private

    attr_reader :action_name

    def verify_configuration!
      return if SKIP_CONFIG_VERIFICATION_FOR.include?(action_name.to_s)

      return if UserConfig.get(:ci)

      raise(Errors::HardFail, "config files not found, please run `gotsha init` first") if UserConfig.blank?

      hooks_dir = BashCommand.run!("git config core.hooksPath").text_output

      unless hooks_dir == Config::HOOKS_DIR
        raise(Errors::HardFail, "Git hooks not configured, please run `gotsha init`")
      end

      return unless UserConfig.get(:autogenerated)

      raise Errors::HardFail,
            "autogenerated config detected! Please, remove `autogenerated = true` from `#{Config::CONFIG_FILE}` " \
            "(you can run `gotsha configure` to open it)"
    end

    def action_class
      Kernel.const_get("Gotsha::Actions::#{action_name.to_s.capitalize}")
    rescue NameError
      return Gotsha::Actions::Help if action_name.to_s == HELP_ACTION_SHORTCUT

      raise Errors::HardFail, "unknown command `#{action_name}`. See available commands via `gotsha help`."
    end
  end
end
