# frozen_string_literal: true

RSpec.describe Gotsha::ActionDispatcher do
  describe "without any action name" do
    it "calls Help action" do
      expect_any_instance_of(Gotsha::Actions::Help).to receive(:call)

      described_class.call
    end
  end

  describe "with unknown action name" do
    let(:unknown_action) { "obey" }

    it "raises HardFail error with user friendly message" do
      expect do
        described_class.call(unknown_action)
      end.to raise_error(Gotsha::Errors::HardFail)
    end
  end

  describe "with a valid action" do
    let(:action) { "init" }

    it "calls the action" do
      expect_any_instance_of(Gotsha::Actions::Init).to receive(:call)

      described_class.call(action)
    end
  end

  describe "with autogenerated config" do
    before do
      allow(Gotsha::UserConfig).to receive(:get).and_return(true)

      allow(Gotsha::UserConfig).to receive(:get).with(:ci).and_return(false)
    end

    it "fails with proper error" do
      expect do
        described_class.call
      end.to raise_exception(
        Gotsha::Errors::HardFail,
        "autogenerated config detected! Please, remove `autogenerated = true` from `.gotsha/config.toml` " \
        "(you can run `gotsha configure` to open it)"
      )
    end
  end

  describe "with no config" do
    before do
      allow(Gotsha::UserConfig)
        .to receive(:blank?)
        .and_return(true)
    end

    context "with other action than `init`" do
      it "fails with proper error" do
        expect do
          described_class.call
        end.to raise_exception(
          Gotsha::Errors::HardFail,
          "config files not found, please run `gotsha init` first"
        )
      end
    end

    context "with `init` action" do
      it "calls the action witohut exception" do
        expect_any_instance_of(Gotsha::Actions::Init).to receive(:call)

        described_class.call(:init)
      end
    end
  end

  describe "with help action shortcut" do
    let(:shortcut) { "-h" }

    it "calls the help action" do
      expect_any_instance_of(Gotsha::Actions::Help).to receive(:call)

      described_class.call(shortcut)
    end
  end

  describe "with an extra unexpected argument" do
    let(:action) { "commit" }

    it "calls the action" do
      expect { described_class.call(action, "extra") }
        .to raise_exception(Gotsha::Errors::HardFail, "`gotsha #{action}` does not accept additional arguments")
    end
  end
end
