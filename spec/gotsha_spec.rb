# frozen_string_literal: true

require "fileutils"

# rubocop:disable Metrics/BlockLength:
RSpec.describe Gotsha::CLI do
  before { allow($stdout).to receive(:puts) }

  describe "init" do
    before do
      allow(File).to receive(:exist?).and_return(false)
    end

    it "creates default files and Git configuration" do
      expect(FileUtils).to receive(:mkdir_p).with(".gotsha")
      expect(File).to receive(:write).with(Gotsha::CONFIG_FILE, File.read(Gotsha::CONFIG_TEMPLATE_PATH))
      expect(File).to receive(:write).with(Gotsha::GH_CONFIG_FILE, File.read(Gotsha::GH_CONFIG_TEMPLATE_PATH))

      expect(Kernel).to receive(:system).with("git config --local notes.displayRef refs/notes/gotsha")

      expect(Kernel).to receive(:system).with(
        "git config --local --replace-all remote.origin.push HEAD"
      )

      expect(Kernel).to receive(:system).with(
        "git config --local --add remote.origin.push refs/notes/gotsha"
      )

      expect(Kernel).to receive(:system).with(
        "git config --local --replace-all remote.origin.fetch refs/notes/gotsha:refs/notes/gotsha"
      )

      described_class.call(:init)
    end
  end

  describe "without any action passed" do
    it "calls `run`" do
      expect_any_instance_of(described_class).to receive(:run)

      described_class.call
    end
  end

  describe "run" do
    context "without test command configured" do
      before do
        allow(YAML)
          .to receive(:load_file)
          .with(Gotsha::CONFIG_FILE)
          .and_return({ "commands" => [] })
      end

      it "fails with proper error" do
        expect do
          described_class.call(:run)
        end.to raise_exception(Gotsha::NoCommandConfigured)
      end
    end

    context "with autogenerated config" do
      before do
        allow(YAML)
          .to receive(:load_file)
          .with(Gotsha::CONFIG_FILE)
          .and_return({ "autogenerated" => true })
      end

      it "fails with proper error" do
        expect do
          described_class.call(:run)
        end.to raise_exception(Gotsha::AutogeneratedConfigDetected)
      end
    end

    context "with a test command configured" do
      let(:test_command) { "rails t" }
      let(:sha) { "test-sha" }

      before do
        allow(YAML)
          .to receive(:load_file)
          .with(Gotsha::CONFIG_FILE)
          .and_return({ "commands" => [test_command] })
      end

      it "runs the command" do
        allow_any_instance_of(described_class)
          .to receive(:last_commit_sha)
          .and_return(sha)

        expect(Kernel).to receive(:system).with(test_command).and_return(true)
        expect(Kernel).to receive(:system).with("git notes --ref=gotsha add -f -m 'ok'").and_return(true)

        described_class.call(:run)
      end
    end
  end
  # rubocop:enable Metrics/BlockLength:
end
