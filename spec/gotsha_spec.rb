# frozen_string_literal: true

require "fileutils"

# rubocop:disable Metrics/BlockLength:
RSpec.describe Gotsha::CLI do
  before { allow($stdout).to receive(:puts) }

  describe "init" do
    before do
      allow(File).to receive(:exist?).and_return(false)
    end

    it "creates default files and Git configuration" do
      expect(FileUtils).to receive(:mkdir_p).with(".gotsha/hooks")
      expect(FileUtils).to receive(:mkdir_p).with(".gotsha")

      expect(File).to receive(:write).with(Gotsha::CONFIG_FILE, File.read(Gotsha::CONFIG_TEMPLATE_PATH))
      expect(File).to receive(:write).with(Gotsha::GH_CONFIG_FILE, File.read(Gotsha::GH_CONFIG_TEMPLATE_PATH))

      expect(FileUtils).to receive(:cp).with(anything, ".gotsha/hooks/pre-push")
      expect(FileUtils).to receive(:cp).with(anything, ".gotsha/hooks/post-commit")

      expect(FileUtils).to receive(:chmod).with("+x", ".gotsha/hooks/pre-push")
      expect(FileUtils).to receive(:chmod).with("+x", ".gotsha/hooks/post-commit")

      expect(Kernel).to receive(:system).with("git config --local core.hooksPath .gotsha/hooks")

      described_class.call(:init)
    end
  end

  describe "without any action passed" do
    it "calls `run`" do
      expect_any_instance_of(described_class).to receive(:run)

      described_class.call
    end
  end

  describe "run" do
    context "without test command configured" do
      before do
        allow(YAML)
          .to receive(:load_file)
          .with(Gotsha::CONFIG_FILE)
          .and_return({ "commands" => [] })
      end

      it "fails with proper error" do
        expect do
          described_class.call(:run)
        end.to raise_exception(Gotsha::NoCommandConfigured)
      end
    end

    context "with autogenerated config" do
      before do
        allow(YAML)
          .to receive(:load_file)
          .with(Gotsha::CONFIG_FILE)
          .and_return({ "autogenerated" => true })
      end

      it "fails with proper error" do
        expect do
          described_class.call(:run)
        end.to raise_exception(Gotsha::AutogeneratedConfigDetected)
      end
    end

    context "with a test command configured" do
      let(:test_command) { "rails t" }
      let(:sha) { "test-sha" }

      before do
        allow(YAML)
          .to receive(:load_file)
          .with(Gotsha::CONFIG_FILE)
          .and_return({ "commands" => [test_command] })
      end

      it "runs the command" do
        allow_any_instance_of(described_class)
          .to receive(:last_commit_sha)
          .and_return(sha)

        expect(Kernel).to receive(:system).with(test_command).and_return(true)
        expect(Kernel).to receive(:system).with("git notes --ref=gotsha add -f -m 'ok'").and_return(true)

        described_class.call(:run)
      end
    end
  end
  # rubocop:enable Metrics/BlockLength:

  describe "verify" do
    context "when last note is ok" do
      before do
        allow_any_instance_of(described_class)
          .to receive(:last_comment_note)
          .and_return("ok")
      end

      it "prints success and exits 0" do
        expect($stdout).to receive(:puts).with("\n✓ Gotsha: tests passed\n\n")
        expect { described_class.call(:verify) }.to raise_error(SystemExit) { |e|
          expect(e.status).to eq(0)
        }
      end
    end

    context "when last note is not ok" do
      before do
        allow_any_instance_of(described_class)
          .to receive(:last_comment_note)
          .and_return("nope")
      end

      it "prints not verified and exits 1" do
        expect($stdout).to receive(:puts).with("\n✗ Gotsha: not verified yet\n\n")
        expect { described_class.call(:verify) }.to raise_error(SystemExit) { |e|
          expect(e.status).to eq(1)
        }
      end
    end
  end
end
